dataSet <- HrEmployeeAttrition
#ucitavanje funkcija
source("Functions.R")
#Ucitavanje biblioteka
library(caret)
library(ROSE)
library(themis)
library(pROC)
library(randomForest)
library(randomForest)
set.seed(1010)
indexes <- createDataPartition(dataSet$Attrition, p= 0.80, list = F)
train.data <- dataSet[indexes,]
test.data <- dataSet[-indexes,]
rf1 <- randomForest(Attrition~., data = train.data)
rf1.pred <- predict(object = rf1, newdata = test.data, type = "class")
rf1.cm <- table(true = test.data$Attrition, predicted = rf1.pred)
rf1.cm
rf1.eval <- getEvaluationMetrics(rf1.cm)
rf1.eval
#control
ctrl <- trainControl(method = "repeatedcv", repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = "down")
#downSample
set.seed(1010)
down_inside <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
trControl = ctrl)
#up
ctrl$sampling <- "up"
set.seed(1010)
up_inside <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
trControl = ctrl)
#rose
ctrl$sampling <- "rose"
set.seed(1010)
rose_inside <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
trControl = ctrl)
#original
ctrl$sampling <- NULL
set.seed(1010)
orig_fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
trControl = ctrl)
inside_models <- list(original = orig_fit,
down = down_inside,
up = up_inside,
ROSE = rose_inside)
inside_resampling <- resamples(inside_models)
summary(inside_resampling, metric = "ROC")
rf2.pred <- predict(object = orig_fit$finalModel, newdata = test.data, type = "class")
rf2.cm <- table(true = test.data$Attrition, predicted = rf2.pred)
rf2.cm
rf2.eval <- getEvaluationMetrics(rf2.cm)
rf2.eval
grid <- expand.grid(.mtry = 2:4,
.splitrule = "gini",
.min.node.size = 5)
grid <- expand.grid(.mtry = 2:4,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(mtry = 2:4,
splitrule = "gini",
min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 1:23,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 1,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:4,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
fit = train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 5,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:7,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:6,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:5,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:3,
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = mtry,
.splitrule = "gini",
.min.node.size = 5)
grid <- expand.grid(.mtry = c(2:4),
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = c(2:7),
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = c(2:7),
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = orig_fit)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = c(2:7),
.splitrule = "gini",
.min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
sampling = NULL)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:4,
.splitrule = "gini",
.min.node.size = 5)
grid <- expand.grid(mtry = 2:4,
splitrule = "gini",
min.node.size = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(mtry = 2:4)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
warnings()
grid <- expand.grid(mtry = 5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(mtry = 2:3)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(mtry = 2:7)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(mtry = 1:2)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(mtry = 3:5)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(mtry = 4:8)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(mtry = mtry)
grid <- expand.grid(mtry = 12)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:4)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:12)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
grid <- expand.grid(.mtry = 2:2)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl,
importance = "impurity")
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl)
grid <- expand.grid(.mtry = 2:4)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl)
warnings()
grid <- expand.grid(.mtry = 2:4)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
fit <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl)
fit$finalModel
fit$bestTune$mtry
mtryrf <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl)
mtryrf$finalModel
mtryrf$bestTune$mtry
grid <- expand.grid(.mtry = 2:4)
ctrl <- trainControl(method = "CV",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
mtry_rf <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl)
mtry_rf$finalModel
best_mtry <- mtryrf$bestTune$mtry
rf3 <- randomForest(Attrition~., data = train.data, mtry = best_mtry)
rf3.pred <- predict(object = rf3, data = test.data, type = "class")
rf3.cm <- table(true = test.data$Attrition, predicted = rf3.pred)
rf3 <- randomForest(Attrition~., data = train.data, mtry = best_mtry)
rf3.pred <- predict(object = rf3, data = test.data, type = "class")
rf3.cm <- table(true = test.data$Attrition, predicted = rf3.pred)
rf3.pred <- predict(object = rf3, data = test.data)
rf3.cm <- table(true = test.data$Attrition, predicted = rf3.pred)
rf3.pred <- predict(object = mtry_rf$finalModel, data = test.data, type = "class")
rf3.cm <- table(true = test.data$Attrition, predicted = rf3.pred)
rf3.cm <- table(actual = test.data$Attrition, predicted = rf3.pred)
rf3.cm <- table(actual = test.data$Attrition, predicted = rf3.pred$predictions)
rf3.pred$predictions
mtry_rf <- train(x = train.data[,-24],
y = train.data$Attrition,
method = "rf",
metric = "ROC",
tuneGrid = grid,
trControl = ctrl)
mtry_rf$finalModel
best_mtry <- mtry_rf$bestTune$mtry
rf3 <- randomForest(Attrition~., data = train.data, mtry = best_mtry)
rf3.pred <- predict(object = rf3, data = test.data, type = "class")
rf3.cm <- table(actual = test.data$Attrition, predicted = rf3.pred)
rf3.cm <- table(true = test.data$Attrition, predicted = rf3.pred)
rf3.pred <- predict(object = rf3, newdata = test.data, type = "class")
rf3.cm <- table(true = test.data$Attrition, predicted = rf3.pred)
rf3.cm
rf3.eval <- getEvaluationMetrics(rf3.cm)
rf3.eval
data.frame(rbind(rf1.eval, rf2.eval, rf3.eval), row.names = c("Forest1", "Forest2", "Forest3"))
